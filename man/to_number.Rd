% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/quantities.R
\name{to_number}
\alias{to_number}
\title{Convert natural language numbers to numeric type}
\usage{
to_number(string)
}
\arguments{
\item{string}{A character vector containing one English-language number per
value.}
}
\value{
A numeric vector of the same length as \code{string}
}
\description{
\code{to_number()} can be used to convert natural language expressions like
"fourteen", "eleven hundred", "six fifths", or "two hundred and a half" to
actual numbers suitable for mathematical functions. It will return a vector
the same length as \code{string}.
}
\details{
\code{to_number()} currently supports correctly-spelled English language numbers
up to the billions and mixed, proper, or improper fractions with denominators
2-16. \code{string} must already be cleaned with one number per value.
}
\examples{
english_numbers <- c("one", "two", "three", "four and a half",
"five million and thirty-seven", "eleven hundred", "sixty-four",
"seven thousand fifty-four and a half", "six and twelve halves",
"nine hundred ninety nine billion nine hundred ninety-nine thousand nine hundred and ninety-nine",
"five hundred thirty seven thousand four hundred and twenty eight and seven eighths")
to_number(english_numbers)

# If you pass in a string with multiple numbers, to_number() may behave unexpectedly.
listed_numbers <- "three fish, fourteen and a half plates, a sixth of a liver, twelve geese"
to_number(listed_numbers)

# It's more tolerant of non-numeric words, but you shouldn't rely on this:
to_number(c("three fish", "fourteen and a half plates", "a sixth of a liver", "twelve geese"))

# Use extract_numbers() or ingredient_parts() instead.
extract_numbers(listed_numbers)
ingredient_parts(listed_numbers, mode = "paragraph")
}
\seealso{
\code{\link[=extract_numbers]{extract_numbers()}} for finding all natural language numbers inside
texts or \code{\link[=ingredient_parts]{ingredient_parts()}} for finding numbers with associated units
}
