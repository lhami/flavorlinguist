% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/quantities.R
\name{ingredient_parts}
\alias{ingredient_parts}
\title{Collect ingredient quantity-shaped numbers from texts}
\usage{
ingredient_parts(
  string,
  mode = c("single", "multiline", "paragraph"),
  return = c("df", "list"),
  convert = TRUE
)
}
\arguments{
\item{string}{A character vector from which to extract number-unit-ingredient
expressions}

\item{mode}{Search method to use (affects the number of matches possible per
entry and ).
\describe{
\item{\code{single}}{Looks for one number per item in \code{string}, optionally with a unit, and then treats the rest of the string as the ingredient. Best for text you've already cleaned.}
\item{\code{multiline}}{Looks for number per \emph{line} in each item of \code{string} (assuming newline characters are present), optionally with a unit, and then treats the rest of the string as the ingredient. Be cautious using this with scraped HTML.}
\item{\code{paragraph}}{Can find mulltiple numbers (optionally with units) per item in \code{string}, using either a newline character, a tab, a comma, a semicolon, or a pipe (|) to mark the end of the ingredient name.}
}}

\item{return}{Format for the return data, either "df" or "list"}

\item{convert}{Boolean. If \code{TRUE} (default), will add columns to the data
frame containing a numeric form of the extracted number and, for known
units of volume, an attempted conversion to Liters. Must be \code{FALSE} for
\code{return = "list"}.}
}
\value{
For \code{mode = "df"}, a "long" data frame with one row per
number-unit-ingredient expression found in \code{string}, with columns:
\itemize{
\item \code{ID}, the position in \code{string} where the natural language number was found.
\item \code{Input}, the unmodified value of \code{string} where the natural language number was found.
\item \code{Extracted_Phrase}, the number-unit-ingredient expression as found in the text
\item \code{Number_Words}, the natural language number as found in the text
\item \code{Unit_Words}, the natural language unit of volume (if any) found in the text, or NA.
\item \code{Ingredient_Words}, the portion of the \code{Extracted_Phrase} after the number and unit.
}

If \code{convert == TRUE}, the data frame will also have columns:
\itemize{
\item \code{Raw_Number}, a best-effort numeric representation of the \code{Number_Words}, using \code{\link[=to_number]{to_number()}}.
\item \code{Converted_Amount}, a conversion of \code{Raw_Number} to liters, where possible.
\item \code{Converted_Unit}, the units corresponding to \code{Converted_Amount}.
}

The data frame will have at least as many rows as values in \code{string}, since
values without number-unit-ingredient expressions will return rows with an
\code{ID} and \code{Input} but NA for other columns.

For \code{mode = "list"}, a list of the same length as \code{string} containing
character matrices of the matches from \code{\link[stringr:str_match]{stringr::str_match_all()}}. Each
matrix will have one row per number-unit-ingredient match and 4 columns
with the whole match and then the 3 component parts.
}
\description{
\code{ingredient_parts()} can be used to extract natural language expressions like
"three cups flour", "1 tsp vanilla extract", "half gallon milk", or "Â¼ melon"
from a text and convert them to actual numbers suitable for mathematical
functions. Currently, only liquid volume units are fully supported.
}
\examples{
ingredient_parts(c("1 tsp butter", "3 gallons milk", "14 eggs",
"fifteen bottles ketchup", "four hundred and a half snails"))
ingredient_parts(c("1 tsp butter", "3 gallons milk", "14 eggs",
"fifteen bottles ketchup", "four hundred and a half snails",
"3 eggs, 2 pints of milk, four and a half cups flour"),
mode = "paragraph")
}
\seealso{
\link{units_volume} for the table of unit conversions used when \code{convert = TRUE}
}
