% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/quantities.R
\name{extract_numbers}
\alias{extract_numbers}
\title{Collect all of the natural language numbers from texts}
\usage{
extract_numbers(string, return = c("df", "list"))
}
\arguments{
\item{string}{A character vector from which to extract English Language
numbers}

\item{return}{Format for the return data, either "df" or "list"}
}
\value{
For \code{mode = "df"}, a "long" data frame with one row per natural
language number found in \code{string}, with columns:
\itemize{
\item \code{ID}, the position in \code{string} where the natural language number was found.
\item \code{Input}, the unmodified value of \code{string} where the natural language number was found.
\item \code{Number_Words}, the natural language number as found in the text
\item \code{Value}, a best-effort numeric representation of the number, using \code{\link[=to_number]{to_number()}}.
}

The data frame will have at least as many rows as values in \code{string}, since
values without natural language numbers will return rows with an \code{ID} and
\code{Input} but NA for other columns.

For \code{mode = "list"}, a list of the same length as \code{string} containing data
frames with \code{Number_Words} and \code{Value}.
}
\description{
\code{extract_numbers()} can be used to extract natural language expressions like
"fourteen", "eleven hundred", "six fifths", or "two hundred and a half" from
a text and convert them to actual numbers suitable for mathematical
functions. It can extract multiple numbers from each value in \code{string},
returning either a long data frame or a list of data frames. See
\code{\link[=to_number]{to_number()}} for the underlying implementation.
}
\examples{
english_numbers <- c("one", "two", "three", "four and a half",
"five million and thirty-seven", "eleven hundred", "sixty-four",
"seven thousand fifty-four and a half", "six and twelve halves",
"nine hundred ninety nine billion nine hundred ninety-nine thousand nine hundred and ninety-nine",
"five hundred thirty seven thousand four hundred and twenty eight and seven eighths",
"three fish, fourteen and a half plates, a sixth of a liver, twelve geese")
extract_numbers(english_numbers)

# If there's only one natural language number per entry in string, the only difference
# between extract_numbers() and to_number() is the return format.
extract_numbers(c("four", "six hundred twenty-eight"))
extract_numbers(c("four", "six hundred twenty-eight"), return = "list")
to_number(c("four", "six hundred twenty-eight"))
}
\seealso{
\code{\link[=to_number]{to_number()}} to extract and convert one number per entry in
\code{string}.
}
